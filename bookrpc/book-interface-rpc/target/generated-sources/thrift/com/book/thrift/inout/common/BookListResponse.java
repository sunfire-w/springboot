/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.book.thrift.inout.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-27")
public class BookListResponse implements org.apache.thrift.TBase<BookListResponse, BookListResponse._Fields>, java.io.Serializable, Cloneable, Comparable<BookListResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BookListResponse");

  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("baseResp", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BOOK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("BookList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BookListResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BookListResponseTupleSchemeFactory());
  }

  /**
   * 基础返回参数
   */
  public com.book.thrift.inout.common.BaseResponse baseResp; // required
  /**
   * 总记录数
   */
  public long total; // required
  /**
   * 列表
   */
  public List<BookEntity> BookList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 基础返回参数
     */
    BASE_RESP((short)1, "baseResp"),
    /**
     * 总记录数
     */
    TOTAL((short)2, "total"),
    /**
     * 列表
     */
    BOOK_LIST((short)3, "BookList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASE_RESP
          return BASE_RESP;
        case 2: // TOTAL
          return TOTAL;
        case 3: // BOOK_LIST
          return BOOK_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("baseResp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.book.thrift.inout.common.BaseResponse.class)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BOOK_LIST, new org.apache.thrift.meta_data.FieldMetaData("BookList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BookEntity.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BookListResponse.class, metaDataMap);
  }

  public BookListResponse() {
  }

  public BookListResponse(
    com.book.thrift.inout.common.BaseResponse baseResp,
    long total,
    List<BookEntity> BookList)
  {
    this();
    this.baseResp = baseResp;
    this.total = total;
    setTotalIsSet(true);
    this.BookList = BookList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BookListResponse(BookListResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBaseResp()) {
      this.baseResp = new com.book.thrift.inout.common.BaseResponse(other.baseResp);
    }
    this.total = other.total;
    if (other.isSetBookList()) {
      List<BookEntity> __this__BookList = new ArrayList<BookEntity>(other.BookList.size());
      for (BookEntity other_element : other.BookList) {
        __this__BookList.add(new BookEntity(other_element));
      }
      this.BookList = __this__BookList;
    }
  }

  public BookListResponse deepCopy() {
    return new BookListResponse(this);
  }

  @Override
  public void clear() {
    this.baseResp = null;
    setTotalIsSet(false);
    this.total = 0;
    this.BookList = null;
  }

  /**
   * 基础返回参数
   */
  public com.book.thrift.inout.common.BaseResponse getBaseResp() {
    return this.baseResp;
  }

  /**
   * 基础返回参数
   */
  public BookListResponse setBaseResp(com.book.thrift.inout.common.BaseResponse baseResp) {
    this.baseResp = baseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.baseResp = null;
  }

  /** Returns true if field baseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.baseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.baseResp = null;
    }
  }

  /**
   * 总记录数
   */
  public long getTotal() {
    return this.total;
  }

  /**
   * 总记录数
   */
  public BookListResponse setTotal(long total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public int getBookListSize() {
    return (this.BookList == null) ? 0 : this.BookList.size();
  }

  public java.util.Iterator<BookEntity> getBookListIterator() {
    return (this.BookList == null) ? null : this.BookList.iterator();
  }

  public void addToBookList(BookEntity elem) {
    if (this.BookList == null) {
      this.BookList = new ArrayList<BookEntity>();
    }
    this.BookList.add(elem);
  }

  /**
   * 列表
   */
  public List<BookEntity> getBookList() {
    return this.BookList;
  }

  /**
   * 列表
   */
  public BookListResponse setBookList(List<BookEntity> BookList) {
    this.BookList = BookList;
    return this;
  }

  public void unsetBookList() {
    this.BookList = null;
  }

  /** Returns true if field BookList is set (has been assigned a value) and false otherwise */
  public boolean isSetBookList() {
    return this.BookList != null;
  }

  public void setBookListIsSet(boolean value) {
    if (!value) {
      this.BookList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((com.book.thrift.inout.common.BaseResponse)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Long)value);
      }
      break;

    case BOOK_LIST:
      if (value == null) {
        unsetBookList();
      } else {
        setBookList((List<BookEntity>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BASE_RESP:
      return getBaseResp();

    case TOTAL:
      return getTotal();

    case BOOK_LIST:
      return getBookList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BASE_RESP:
      return isSetBaseResp();
    case TOTAL:
      return isSetTotal();
    case BOOK_LIST:
      return isSetBookList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BookListResponse)
      return this.equals((BookListResponse)that);
    return false;
  }

  public boolean equals(BookListResponse that) {
    if (that == null)
      return false;

    boolean this_present_baseResp = true && this.isSetBaseResp();
    boolean that_present_baseResp = true && that.isSetBaseResp();
    if (this_present_baseResp || that_present_baseResp) {
      if (!(this_present_baseResp && that_present_baseResp))
        return false;
      if (!this.baseResp.equals(that.baseResp))
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_BookList = true && this.isSetBookList();
    boolean that_present_BookList = true && that.isSetBookList();
    if (this_present_BookList || that_present_BookList) {
      if (!(this_present_BookList && that_present_BookList))
        return false;
      if (!this.BookList.equals(that.BookList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_baseResp = true && (isSetBaseResp());
    list.add(present_baseResp);
    if (present_baseResp)
      list.add(baseResp);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_BookList = true && (isSetBookList());
    list.add(present_BookList);
    if (present_BookList)
      list.add(BookList);

    return list.hashCode();
  }

  @Override
  public int compareTo(BookListResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBaseResp()).compareTo(other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseResp, other.baseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookList()).compareTo(other.isSetBookList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BookList, other.BookList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BookListResponse(");
    boolean first = true;

    sb.append("baseResp:");
    if (this.baseResp == null) {
      sb.append("null");
    } else {
      sb.append(this.baseResp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BookList:");
    if (this.BookList == null) {
      sb.append("null");
    } else {
      sb.append(this.BookList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (baseResp != null) {
      baseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookListResponseStandardSchemeFactory implements SchemeFactory {
    public BookListResponseStandardScheme getScheme() {
      return new BookListResponseStandardScheme();
    }
  }

  private static class BookListResponseStandardScheme extends StandardScheme<BookListResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BookListResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baseResp = new com.book.thrift.inout.common.BaseResponse();
              struct.baseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total = iprot.readI64();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BOOK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.BookList = new ArrayList<BookEntity>(_list8.size);
                BookEntity _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new BookEntity();
                  _elem9.read(iprot);
                  struct.BookList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setBookListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BookListResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.baseResp != null) {
        oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
        struct.baseResp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI64(struct.total);
      oprot.writeFieldEnd();
      if (struct.BookList != null) {
        oprot.writeFieldBegin(BOOK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.BookList.size()));
          for (BookEntity _iter11 : struct.BookList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookListResponseTupleSchemeFactory implements SchemeFactory {
    public BookListResponseTupleScheme getScheme() {
      return new BookListResponseTupleScheme();
    }
  }

  private static class BookListResponseTupleScheme extends TupleScheme<BookListResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BookListResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBaseResp()) {
        optionals.set(0);
      }
      if (struct.isSetTotal()) {
        optionals.set(1);
      }
      if (struct.isSetBookList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBaseResp()) {
        struct.baseResp.write(oprot);
      }
      if (struct.isSetTotal()) {
        oprot.writeI64(struct.total);
      }
      if (struct.isSetBookList()) {
        {
          oprot.writeI32(struct.BookList.size());
          for (BookEntity _iter12 : struct.BookList)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BookListResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.baseResp = new com.book.thrift.inout.common.BaseResponse();
        struct.baseResp.read(iprot);
        struct.setBaseRespIsSet(true);
      }
      if (incoming.get(1)) {
        struct.total = iprot.readI64();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.BookList = new ArrayList<BookEntity>(_list13.size);
          BookEntity _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new BookEntity();
            _elem14.read(iprot);
            struct.BookList.add(_elem14);
          }
        }
        struct.setBookListIsSet(true);
      }
    }
  }

}

