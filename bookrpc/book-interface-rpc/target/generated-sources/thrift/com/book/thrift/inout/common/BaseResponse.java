/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.book.thrift.inout.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-27")
public class BaseResponse implements org.apache.thrift.TBase<BaseResponse, BaseResponse._Fields>, java.io.Serializable, Cloneable, Comparable<BaseResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseResponse");

  private static final org.apache.thrift.protocol.TField SEQ_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("seqNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("respCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESP_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("respDesc", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BaseResponseTupleSchemeFactory());
  }

  /**
   * 本次请求的编号
   */
  public String seqNo; // required
  public String respCode; // required
  public String respDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 本次请求的编号
     */
    SEQ_NO((short)1, "seqNo"),
    RESP_CODE((short)2, "respCode"),
    RESP_DESC((short)3, "respDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQ_NO
          return SEQ_NO;
        case 2: // RESP_CODE
          return RESP_CODE;
        case 3: // RESP_DESC
          return RESP_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQ_NO, new org.apache.thrift.meta_data.FieldMetaData("seqNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESP_CODE, new org.apache.thrift.meta_data.FieldMetaData("respCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESP_DESC, new org.apache.thrift.meta_data.FieldMetaData("respDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseResponse.class, metaDataMap);
  }

  public BaseResponse() {
  }

  public BaseResponse(
    String seqNo,
    String respCode,
    String respDesc)
  {
    this();
    this.seqNo = seqNo;
    this.respCode = respCode;
    this.respDesc = respDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseResponse(BaseResponse other) {
    if (other.isSetSeqNo()) {
      this.seqNo = other.seqNo;
    }
    if (other.isSetRespCode()) {
      this.respCode = other.respCode;
    }
    if (other.isSetRespDesc()) {
      this.respDesc = other.respDesc;
    }
  }

  public BaseResponse deepCopy() {
    return new BaseResponse(this);
  }

  @Override
  public void clear() {
    this.seqNo = null;
    this.respCode = null;
    this.respDesc = null;
  }

  /**
   * 本次请求的编号
   */
  public String getSeqNo() {
    return this.seqNo;
  }

  /**
   * 本次请求的编号
   */
  public BaseResponse setSeqNo(String seqNo) {
    this.seqNo = seqNo;
    return this;
  }

  public void unsetSeqNo() {
    this.seqNo = null;
  }

  /** Returns true if field seqNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqNo() {
    return this.seqNo != null;
  }

  public void setSeqNoIsSet(boolean value) {
    if (!value) {
      this.seqNo = null;
    }
  }

  public String getRespCode() {
    return this.respCode;
  }

  public BaseResponse setRespCode(String respCode) {
    this.respCode = respCode;
    return this;
  }

  public void unsetRespCode() {
    this.respCode = null;
  }

  /** Returns true if field respCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRespCode() {
    return this.respCode != null;
  }

  public void setRespCodeIsSet(boolean value) {
    if (!value) {
      this.respCode = null;
    }
  }

  public String getRespDesc() {
    return this.respDesc;
  }

  public BaseResponse setRespDesc(String respDesc) {
    this.respDesc = respDesc;
    return this;
  }

  public void unsetRespDesc() {
    this.respDesc = null;
  }

  /** Returns true if field respDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetRespDesc() {
    return this.respDesc != null;
  }

  public void setRespDescIsSet(boolean value) {
    if (!value) {
      this.respDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQ_NO:
      if (value == null) {
        unsetSeqNo();
      } else {
        setSeqNo((String)value);
      }
      break;

    case RESP_CODE:
      if (value == null) {
        unsetRespCode();
      } else {
        setRespCode((String)value);
      }
      break;

    case RESP_DESC:
      if (value == null) {
        unsetRespDesc();
      } else {
        setRespDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQ_NO:
      return getSeqNo();

    case RESP_CODE:
      return getRespCode();

    case RESP_DESC:
      return getRespDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQ_NO:
      return isSetSeqNo();
    case RESP_CODE:
      return isSetRespCode();
    case RESP_DESC:
      return isSetRespDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseResponse)
      return this.equals((BaseResponse)that);
    return false;
  }

  public boolean equals(BaseResponse that) {
    if (that == null)
      return false;

    boolean this_present_seqNo = true && this.isSetSeqNo();
    boolean that_present_seqNo = true && that.isSetSeqNo();
    if (this_present_seqNo || that_present_seqNo) {
      if (!(this_present_seqNo && that_present_seqNo))
        return false;
      if (!this.seqNo.equals(that.seqNo))
        return false;
    }

    boolean this_present_respCode = true && this.isSetRespCode();
    boolean that_present_respCode = true && that.isSetRespCode();
    if (this_present_respCode || that_present_respCode) {
      if (!(this_present_respCode && that_present_respCode))
        return false;
      if (!this.respCode.equals(that.respCode))
        return false;
    }

    boolean this_present_respDesc = true && this.isSetRespDesc();
    boolean that_present_respDesc = true && that.isSetRespDesc();
    if (this_present_respDesc || that_present_respDesc) {
      if (!(this_present_respDesc && that_present_respDesc))
        return false;
      if (!this.respDesc.equals(that.respDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_seqNo = true && (isSetSeqNo());
    list.add(present_seqNo);
    if (present_seqNo)
      list.add(seqNo);

    boolean present_respCode = true && (isSetRespCode());
    list.add(present_respCode);
    if (present_respCode)
      list.add(respCode);

    boolean present_respDesc = true && (isSetRespDesc());
    list.add(present_respDesc);
    if (present_respDesc)
      list.add(respDesc);

    return list.hashCode();
  }

  @Override
  public int compareTo(BaseResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSeqNo()).compareTo(other.isSetSeqNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqNo, other.seqNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRespCode()).compareTo(other.isSetRespCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRespCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respCode, other.respCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRespDesc()).compareTo(other.isSetRespDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRespDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respDesc, other.respDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseResponse(");
    boolean first = true;

    sb.append("seqNo:");
    if (this.seqNo == null) {
      sb.append("null");
    } else {
      sb.append(this.seqNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("respCode:");
    if (this.respCode == null) {
      sb.append("null");
    } else {
      sb.append(this.respCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("respDesc:");
    if (this.respDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.respDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseResponseStandardSchemeFactory implements SchemeFactory {
    public BaseResponseStandardScheme getScheme() {
      return new BaseResponseStandardScheme();
    }
  }

  private static class BaseResponseStandardScheme extends StandardScheme<BaseResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQ_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.seqNo = iprot.readString();
              struct.setSeqNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.respCode = iprot.readString();
              struct.setRespCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESP_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.respDesc = iprot.readString();
              struct.setRespDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.seqNo != null) {
        oprot.writeFieldBegin(SEQ_NO_FIELD_DESC);
        oprot.writeString(struct.seqNo);
        oprot.writeFieldEnd();
      }
      if (struct.respCode != null) {
        oprot.writeFieldBegin(RESP_CODE_FIELD_DESC);
        oprot.writeString(struct.respCode);
        oprot.writeFieldEnd();
      }
      if (struct.respDesc != null) {
        oprot.writeFieldBegin(RESP_DESC_FIELD_DESC);
        oprot.writeString(struct.respDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseResponseTupleSchemeFactory implements SchemeFactory {
    public BaseResponseTupleScheme getScheme() {
      return new BaseResponseTupleScheme();
    }
  }

  private static class BaseResponseTupleScheme extends TupleScheme<BaseResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSeqNo()) {
        optionals.set(0);
      }
      if (struct.isSetRespCode()) {
        optionals.set(1);
      }
      if (struct.isSetRespDesc()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSeqNo()) {
        oprot.writeString(struct.seqNo);
      }
      if (struct.isSetRespCode()) {
        oprot.writeString(struct.respCode);
      }
      if (struct.isSetRespDesc()) {
        oprot.writeString(struct.respDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.seqNo = iprot.readString();
        struct.setSeqNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.respCode = iprot.readString();
        struct.setRespCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.respDesc = iprot.readString();
        struct.setRespDescIsSet(true);
      }
    }
  }

}

